{
  "hash": "265bae63bd240833c5fdedf16e9c659b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pump Trimming with AI: A Deep Dive into Theoretical and Engineering Aspects\"\nauthor: \"Mohammed Twheed Khater\"\ndate: \"`r Sys.Date()`\"\noutput:\n  html_document:\n    toc: true\n    toc_depth: 3\n    theme: united\n    highlight: tango\n---\n\n## Introduction\n\nPump trimming, a crucial process in fluid dynamics, involves adjusting the diameter of a pump's impeller to optimize performance for specific flow rates and heads. Traditional methods, such as affinity laws, provide initial guidelines but often fall short in complex scenarios. With advancements in artificial intelligence (AI), specifically neural networks, more precise and adaptive models can be developed to improve pump efficiency and performance.\n\nIn this document, we explore the application of neural networks for pump trimming, focusing on the theoretical and engineering aspects. We will delve into the dataset preparation, neural network training, and performance evaluation, providing a comprehensive understanding of the methodology and the underlying principles.\n\n## Dataset Preparation\n\nWe start by loading and preprocessing the datasets required for training and evaluation.\n\n\n```{matlab}\nclear; clc; clf; close all;\n\n% Load data\nload('filtered_QHD_table.mat');\nload('filtered_QDP_table.mat');\nload('deleted_QHD_table.mat');\nload('deleted_QDP_table.mat');\n\n% Extract data\nQH = [filtered_QHD_table.FlowRate_m3h, filtered_QHD_table.Head_m]';\nD = [filtered_QHD_table.Diameter_mm]';\nQH_beps = [deleted_QHD_table.FlowRate_m3h, deleted_QHD_table.Head_m]';\nD_beps = [deleted_QHD_table.Diameter_mm]';\nQD = [filtered_QDP_table.FlowRate_m3h, filtered_QDP_table.Diameter_mm]';\nP = [filtered_QDP_table.Power_kW]';\nQD_beps = [deleted_QDP_table.FlowRate_m3h, deleted_QDP_table.Diameter_mm]';\nP_beps = [deleted_QDP_table.Power_kW]';\n```\n\n\nThe datasets include various measurements of flow rate (Q), head (H), diameter (D), and power (P) for different pump configurations. By filtering and deleting specific entries, we create training and testing sets to evaluate the neural networks' performance on unseen data.\n\n## Neural Network Architecture\n\nWe employ feedforward neural networks (FNNs) with different architectures tailored for specific datasets (QHD, QDH, and QDP). The architectures are optimized using genetic algorithms (GA) to determine the best network structure and hyperparameters.\n\n\n```{matlab}\n% Hyperparameters based on latest optimization with GA\nrandomSeed = 4837;\nnn_QHD_size_matrix = [2, 16];\nnn_QDH_size_matrix = [2, 16];\nnn_QDP_size_matrix = [2, 7, 29, 17];\nmaxEpochs = 191;\ntrainFcn = 'trainlm';\n```\n\n\n### Training the Networks\n\nWe train the neural networks on the full datasets to establish baseline performance metrics. The training function `train_nn` utilizes the Levenberg-Marquardt algorithm (`trainlm`) to minimize the mean squared error (MSE).\n\n\n```{matlab}\n% Train on full dataset\n[trainedNetQHD, avgMSEsQHD, trainPerformanceQHD, valPerformanceQHD, testPerformanceQHD] = train_nn(nn_QHD_size_matrix, maxEpochs, trainFcn, QH, D, randomSeed);\n[trainedNetQDH, avgMSEsQDH, trainPerformanceQDH, valPerformanceQDH, testPerformanceQDH] = train_nn(nn_QDH_size_matrix, maxEpochs, trainFcn, [QH(1,:); D], QH(2,:), randomSeed);\n[trainedNetQDP, avgMSEsQDP, trainPerformanceQDP, valPerformanceQDP, testPerformanceQDP] = train_nn(nn_QDP_size_matrix, maxEpochs, trainFcn, QD, P, randomSeed);\n```\n\n\n## Theoretical Background\n\n### Neural Networks in Pump Trimming\n\nNeural networks are particularly suitable for modeling complex nonlinear relationships in fluid dynamics. The key advantage is their ability to learn from data without explicit programming of the underlying physical laws. This makes them ideal for predicting pump performance across a wide range of operating conditions.\n\n#### Network Architecture\n\n- **Input Layer**: Represents the features (e.g., flow rate, head, diameter) of the pump.\n- **Hidden Layers**: Capture the nonlinear relationships between input features and the output (e.g., head or power).\n- **Output Layer**: Provides the predicted value (e.g., optimized diameter).\n\nThe choice of the number of layers and neurons is critical. Too few neurons can lead to underfitting, while too many can cause overfitting. The GA helps in optimizing this balance.\n\n### Training and Optimization\n\nThe training process involves adjusting the weights of the neural network to minimize the MSE between the predicted and actual values. The Levenberg-Marquardt algorithm, a popular optimization technique, is used for this purpose due to its efficiency in handling large datasets and complex models.\n\n## Implementation and Results\n\n### Removing Diameters and Training\n\nWe systematically remove each unique diameter from the dataset and train the neural network on the remaining data. This process helps in evaluating the network's robustness and generalization capability.\n\n\n```{matlab}\n% Initialize results tables with headers\nQHD_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});\nQDP_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});\nQDH_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});\n\n% Weights for different errors\nweights = struct('train', 0.05, 'val', 0.05, 'test', 0.35, 'deleted_diameter', 0.45, 'beps', 0.1);\n\n% Function to compute the weighted score\ncompute_score = @(trainPerf, valPerf, testPerf, mseDeleted, mseBEPS, weights) ...\n    weights.train * trainPerf + weights.val * valPerf + weights.test * testPerf + weights.deleted_diameter * mseDeleted + weights.beps * mseBEPS;\n```\n\n\n### Evaluation and Visualization\n\nWe evaluate the performance of each network by computing the weighted score, which considers training, validation, and test performances along with errors on deleted diameters and BEP data.\n\n\n```{matlab}\n% Loop to train on different diameters hidden for QHD dataset\ndistinctDiametersQHD = unique(D);\nfor dIdx = 1:length(distinctDiametersQHD)\n    diameterToRemove = distinctDiametersQHD(dIdx);\n    indicesToRemove = find(D == diameterToRemove);\n    removedQH = QH(:, indicesToRemove);\n    removedD = D(indicesToRemove);\n    QH_temp = QH;\n    D_temp = D;\n    QH_temp(:, indicesToRemove) = [];\n    D_temp(:, indicesToRemove) = [];\n\n    try\n        [trainedNetQHD_temp, avgMSEsQHD_temp, trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp] = train_nn(nn_QHD_size_matrix, maxEpochs, trainFcn, QH_temp, D_temp, randomSeed);\n        mse_deleted_diameter = perform(trainedNetQHD_temp, removedD, trainedNetQHD_temp(removedQH));\n        mse_beps = perform(trainedNetQHD_temp, D_beps, trainedNetQHD_temp(QH_beps));\n        \n        % Compute the weighted score\n        score = compute_score(trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp, mse_deleted_diameter, mse_beps, weights);\n\n        % Update QHD_results\n        QHD_results = [QHD_results; {diameterToRemove, avgMSEsQHD_temp, trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp, mse_deleted_diameter, mse_beps}];\n\n        % Plot test data vs trained net predictions\n        figure;\n        plot(QH(1,:), QH(2,:), 'bo', 'DisplayName', 'Original Data'); % Original data\n        hold on;\n        plot(QH_temp(1,:), trainedNetQHD_temp([QH_temp(1,:); D_temp]), 'r*', 'DisplayName', 'Trained Net Predictions'); % Trained net predictions\n        plot(removedQH(1,:), removedQH(2,:), 'gx', 'DisplayName', 'Removed Diameter Data'); % Removed diameter data\n        plot(QH_beps(1,:), QH_beps(2,:), 'ms', 'DisplayName', 'BEPs Data'); % BEPs data\n        legend('Location', 'best');\n        title(['QHD: Diameter ' num2str(diameterToRemove)]);\n        xlabel('Flow Rate (m^3/h)');\n        ylabel('Head (m)');\n        xlim([0 400]);\n        ylim([0 90]);\n        grid on;\n        hold off;\n        saveas(gcf, fullfile('figures', ['QHD_Diameter_' num\n\n2str(diameterToRemove) '.png']));\n    catch ME\n        fprintf('Failed to train on diameter %d. Error: %s\\n', diameterToRemove, ME.message);\n    end\nend\n```\n\n\nThe results are visualized by plotting the original data, trained network predictions, removed diameter data, and BEP data. This helps in understanding the network's ability to generalize and accurately predict pump performance.\n\n## Conclusion\n\nThe integration of AI, particularly neural networks, in pump trimming provides significant improvements over traditional methods. By leveraging data-driven models, we achieve higher accuracy and adaptability in predicting pump performance. This document serves as a detailed guide for researchers and engineers to implement and understand the theoretical and practical aspects of using AI in pump trimming.\n\n",
    "supporting": [
      "index_03_files"
    ],
    "filters": [],
    "includes": {}
  }
}