---
title: "Pump Trimming with AI: A Deep Dive into Theoretical and Engineering Aspects"
author: "Mohammed Twheed Khater"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_depth: 3
    theme: united
    highlight: tango
---



## Introduction

Pump trimming, a crucial process in fluid dynamics, involves adjusting the diameter of a pump's impeller to optimize performance for specific flow rates and heads. Traditional methods, such as affinity laws, provide initial guidelines but often fall short in complex scenarios. With advancements in artificial intelligence (AI), specifically neural networks, more precise and adaptive models can be developed to improve pump efficiency and performance.

In this document, we explore the application of neural networks for pump trimming, focusing on the theoretical and engineering aspects. We will delve into the dataset preparation, neural network training, and performance evaluation, providing a comprehensive understanding of the methodology and the underlying principles.

## Dataset Preparation

We start by loading and preprocessing the datasets required for training and evaluation.

```{matlab}
clear; clc; clf; close all;

% Load data
load('filtered_QHD_table.mat');
load('filtered_QDP_table.mat');
load('deleted_QHD_table.mat');
load('deleted_QDP_table.mat');

% Extract data
QH = [filtered_QHD_table.FlowRate_m3h, filtered_QHD_table.Head_m]';
D = [filtered_QHD_table.Diameter_mm]';
QH_beps = [deleted_QHD_table.FlowRate_m3h, deleted_QHD_table.Head_m]';
D_beps = [deleted_QHD_table.Diameter_mm]';
QD = [filtered_QDP_table.FlowRate_m3h, filtered_QDP_table.Diameter_mm]';
P = [filtered_QDP_table.Power_kW]';
QD_beps = [deleted_QDP_table.FlowRate_m3h, deleted_QDP_table.Diameter_mm]';
P_beps = [deleted_QDP_table.Power_kW]';
```

The datasets include various measurements of flow rate (Q), head (H), diameter (D), and power (P) for different pump configurations. By filtering and deleting specific entries, we create training and testing sets to evaluate the neural networks' performance on unseen data.

## Neural Network Architecture

We employ feedforward neural networks (FNNs) with different architectures tailored for specific datasets (QHD, QDH, and QDP). The architectures are optimized using genetic algorithms (GA) to determine the best network structure and hyperparameters.

```{matlab}
% Hyperparameters based on latest optimization with GA
randomSeed = 4837;
nn_QHD_size_matrix = [2, 16];
nn_QDH_size_matrix = [2, 16];
nn_QDP_size_matrix = [2, 7, 29, 17];
maxEpochs = 191;
trainFcn = 'trainlm';
```

### Training the Networks

We train the neural networks on the full datasets to establish baseline performance metrics. The training function `train_nn` utilizes the Levenberg-Marquardt algorithm (`trainlm`) to minimize the mean squared error (MSE).

```{matlab}
% Train on full dataset
[trainedNetQHD, avgMSEsQHD, trainPerformanceQHD, valPerformanceQHD, testPerformanceQHD] = train_nn(nn_QHD_size_matrix, maxEpochs, trainFcn, QH, D, randomSeed);
[trainedNetQDH, avgMSEsQDH, trainPerformanceQDH, valPerformanceQDH, testPerformanceQDH] = train_nn(nn_QDH_size_matrix, maxEpochs, trainFcn, [QH(1,:); D], QH(2,:), randomSeed);
[trainedNetQDP, avgMSEsQDP, trainPerformanceQDP, valPerformanceQDP, testPerformanceQDP] = train_nn(nn_QDP_size_matrix, maxEpochs, trainFcn, QD, P, randomSeed);
```

## Theoretical Background

### Neural Networks in Pump Trimming

Neural networks are particularly suitable for modeling complex nonlinear relationships in fluid dynamics. The key advantage is their ability to learn from data without explicit programming of the underlying physical laws. This makes them ideal for predicting pump performance across a wide range of operating conditions.

#### Network Architecture

- **Input Layer**: Represents the features (e.g., flow rate, head, diameter) of the pump.
- **Hidden Layers**: Capture the nonlinear relationships between input features and the output (e.g., head or power).
- **Output Layer**: Provides the predicted value (e.g., optimized diameter).

The choice of the number of layers and neurons is critical. Too few neurons can lead to underfitting, while too many can cause overfitting. The GA helps in optimizing this balance.

### Training and Optimization

The training process involves adjusting the weights of the neural network to minimize the MSE between the predicted and actual values. The Levenberg-Marquardt algorithm, a popular optimization technique, is used for this purpose due to its efficiency in handling large datasets and complex models.

## Implementation and Results

### Removing Diameters and Training

We systematically remove each unique diameter from the dataset and train the neural network on the remaining data. This process helps in evaluating the network's robustness and generalization capability.

```{matlab}
% Initialize results tables with headers
QHD_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});
QDP_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});
QDH_results = array2table(NaN(1, 7), 'VariableNames', {'DiameterRemoved', 'AvgMSE', 'TrainPerformance', 'ValPerformance', 'TestPerformance', 'MSEDeletedDiameter', 'MSEBEPs'});

% Weights for different errors
weights = struct('train', 0.05, 'val', 0.05, 'test', 0.35, 'deleted_diameter', 0.45, 'beps', 0.1);

% Function to compute the weighted score
compute_score = @(trainPerf, valPerf, testPerf, mseDeleted, mseBEPS, weights) ...
    weights.train * trainPerf + weights.val * valPerf + weights.test * testPerf + weights.deleted_diameter * mseDeleted + weights.beps * mseBEPS;
```

### Evaluation and Visualization

We evaluate the performance of each network by computing the weighted score, which considers training, validation, and test performances along with errors on deleted diameters and BEP data.

```{matlab}
% Loop to train on different diameters hidden for QHD dataset
distinctDiametersQHD = unique(D);
for dIdx = 1:length(distinctDiametersQHD)
    diameterToRemove = distinctDiametersQHD(dIdx);
    indicesToRemove = find(D == diameterToRemove);
    removedQH = QH(:, indicesToRemove);
    removedD = D(indicesToRemove);
    QH_temp = QH;
    D_temp = D;
    QH_temp(:, indicesToRemove) = [];
    D_temp(:, indicesToRemove) = [];

    try
        [trainedNetQHD_temp, avgMSEsQHD_temp, trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp] = train_nn(nn_QHD_size_matrix, maxEpochs, trainFcn, QH_temp, D_temp, randomSeed);
        mse_deleted_diameter = perform(trainedNetQHD_temp, removedD, trainedNetQHD_temp(removedQH));
        mse_beps = perform(trainedNetQHD_temp, D_beps, trainedNetQHD_temp(QH_beps));
        
        % Compute the weighted score
        score = compute_score(trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp, mse_deleted_diameter, mse_beps, weights);

        % Update QHD_results
        QHD_results = [QHD_results; {diameterToRemove, avgMSEsQHD_temp, trainPerformanceQHD_temp, valPerformanceQHD_temp, testPerformanceQHD_temp, mse_deleted_diameter, mse_beps}];

        % Plot test data vs trained net predictions
        figure;
        plot(QH(1,:), QH(2,:), 'bo', 'DisplayName', 'Original Data'); % Original data
        hold on;
        plot(QH_temp(1,:), trainedNetQHD_temp([QH_temp(1,:); D_temp]), 'r*', 'DisplayName', 'Trained Net Predictions'); % Trained net predictions
        plot(removedQH(1,:), removedQH(2,:), 'gx', 'DisplayName', 'Removed Diameter Data'); % Removed diameter data
        plot(QH_beps(1,:), QH_beps(2,:), 'ms', 'DisplayName', 'BEPs Data'); % BEPs data
        legend('Location', 'best');
        title(['QHD: Diameter ' num2str(diameterToRemove)]);
        xlabel('Flow Rate (m^3/h)');
        ylabel('Head (m)');
        xlim([0 400]);
        ylim([0 90]);
        grid on;
        hold off;
        saveas(gcf, fullfile('figures', ['QHD_Diameter_' num

2str(diameterToRemove) '.png']));
    catch ME
        fprintf('Failed to train on diameter %d. Error: %s\n', diameterToRemove, ME.message);
    end
end
```

The results are visualized by plotting the original data, trained network predictions, removed diameter data, and BEP data. This helps in understanding the network's ability to generalize and accurately predict pump performance.

## Conclusion

The integration of AI, particularly neural networks, in pump trimming provides significant improvements over traditional methods. By leveraging data-driven models, we achieve higher accuracy and adaptability in predicting pump performance. This document serves as a detailed guide for researchers and engineers to implement and understand the theoretical and practical aspects of using AI in pump trimming.

