---
title: "Application of Artificial Intelligence on the Centrifugal Pump Operation"
author: "Mohammed Twheed Khater"
date: "2024-06-24"
---

# Chapter 1: Prediction of the Effect of Impeller Trimming on Centrifugal Pump Performance Using AI

## Introduction

Centrifugal pumps are integral components in various industrial applications, ranging from water supply systems to chemical processing. Optimizing their performance is crucial for enhancing energy efficiency and reducing operational costs. One key optimization technique is impeller trimming, which involves reducing the diameter of a pump impeller to align the pump's performance more closely with the system requirements. This chapter explores the concept of impeller trimming, its significance, traditional methods, and the advantages of employing Artificial Intelligence (AI) for performance prediction.

## The Concept of Impeller Trimming

### What is Trimming?

Impeller trimming is the process of mechanically reducing the diameter of the pump impeller. This adjustment directly influences the pump’s head and flow rate, thereby modifying its performance characteristics. Trimming is performed to ensure that the pump operates within the desired performance range, avoiding over-delivery or under-delivery of fluid.

### Why Trimming?

Impeller trimming is essential for several reasons:
1. **Energy Consumption**: Proper trimming ensures that the pump operates at its optimal efficiency point, significantly reducing energy consumption. Each kilowatt saved at the pump level translates to approximately six kilowatts saved at the power station.
2. **Market Availability**: Pumps available in the market may not always fit specific system requirements precisely. Trimming provides a means to tailor the pump’s performance to meet these specific needs.

## Energy Savings and Environmental Impact

Impeller trimming is not only beneficial for energy savings but also contributes to environmental sustainability. Reduced energy consumption leads to lower greenhouse gas emissions. For every kilowatt-hour (kWh) saved by the pump, the reduction in power station output significantly decreases pollution, making trimming an environmentally responsible practice.

## Traditional Methods of Impeller Trimming

### Scaling Methods

Instead of relying solely on empirical formulas and performance curves derived from extensive testing, scaling methods provide a mathematical approach to predicting the performance of a trimmed impeller. One such method is constant-area scaling, which assumes that the trimmed impeller maintains a constant area, ensuring proportional changes in flow and head.

#### Constant-Area Scaling

Constant-area scaling involves adjusting the impeller diameter while maintaining the proportional relationship between the flow rate and head. This method ensures that the trimmed impeller operates efficiently within the desired performance range, without significant deviations from the original design.

The constant-area scaling method is defined by the following relationship:

\[ D_{trimmed} = D_{original} \times \left(\frac{Q_{trimmed}}{Q_{original}}\right)^{1/2} \]

Where:
- \( D_{trimmed} \) is the diameter of the trimmed impeller.
- \( D_{original} \) is the original diameter of the impeller.
- \( Q_{trimmed} \) is the desired flow rate after trimming.
- \( Q_{original} \) is the original flow rate.

## Artificial Neural Networks for Impeller Trimming

Artificial Neural Networks (ANNs) offer a robust alternative to traditional methods by leveraging large datasets to predict pump performance accurately. Unlike empirical methods, ANNs can model complex, non-linear relationships between variables, providing more precise predictions.

### Advantages of Neural Networks

- **Accuracy**: ANNs can learn from vast amounts of data, capturing intricate patterns and relationships that traditional methods might miss.
- **Efficiency**: Once trained, ANNs can quickly predict performance outcomes for different impeller diameters, saving time and resources.
- **Adaptability**: Neural networks can be updated with new data, continuously improving their predictive capabilities.

### Implementation in MATLAB

The implementation of AI for impeller trimming was carried out using MATLAB. The scripts `main_04.m` and `QHforDiameters.m` are critical components of this implementation, leveraging optimized neural network architectures to predict pump performance based on different impeller diameters.

#### Script: main_04.m

The `main_04.m` script incorporates the following key steps:

1. **Data Loading**: Loading datasets containing flow rate, head, diameter, and power metrics.
2. **Network Training**: Training neural networks with optimized architectures to predict head and power based on flow rate and diameter.
3. **Performance Evaluation**: Evaluating the trained networks on various performance metrics to ensure accuracy and reliability.
4. **Visualization**: Generating 3D plots to visualize the relationship between flow rate, head, diameter, and power, showcasing the neural network predictions versus actual data.

##### Key Functions and Their Roles

- **train_nn**: This function trains the neural network using the provided data, returning the trained model and performance metrics.
- **trim_diameters**: This function determines the optimal trimmed diameter based on the provided pump data and performance criteria.
- **processDataAndVisualize**: This function processes the data and generates visualizations to compare neural network predictions with actual data points.

##### Sample Code Snippet

The following MATLAB code snippet from `main_04.m` demonstrates how to load data, train neural networks, and visualize the results:

```matlab
clear; clc; clf; close all;

% Load data
load('filtered_QHD_table.mat');
load('filtered_QDP_table.mat');
load('deleted_QHD_table.mat');
load('deleted_QDP_table.mat');

% Extract data
QH = [filtered_QHD_table.FlowRate_m3h, filtered_QHD_table.Head_m]';
D = [filtered_QHD_table.Diameter_mm]';
QD = [filtered_QDP_table.FlowRate_m3h, filtered_QDP_table.Diameter_mm]';
P = [filtered_QDP_table.Power_kW]';

% Train on full dataset
[trainedNetQHD, ~, ~, ~, ~] = train_nn([2, 16], 191, 'trainlm', QH, D, 4837);
[trainedNetQDP, ~, ~, ~, ~] = train_nn([2, 7, 29, 17], 191, 'trainlm', QD, P, 4837);

% Visualization
processDataAndVisualize(QH', D', QD', P', trainedNetQHD, trainedNetQDP, 'figures');
```

In this script, data is first loaded from various `.mat` files. The `train_nn` function is used to train neural networks on the flow rate and head data (`QH`) and diameter (`D`). The `processDataAndVisualize` function then generates visualizations to compare neural network predictions with actual data points.

#### Script: QHforDiameters.m

The `QHforDiameters.m` script focuses on optimizing neural network hyperparameters for better performance prediction. It uses a genetic algorithm to find the optimal neural network architecture, ensuring accurate predictions for different impeller diameters.

##### Key Steps in QHforDiameters.m

1. **Initialization**: Loading data and initializing variables.
2. **Hyperparameter Optimization**: Using a genetic algorithm to find the optimal neural network architecture.
3. **Performance Evaluation**: Assessing the neural network's performance on the training and test datasets.
4. **Visualization**: Plotting the predicted performance curves for different impeller diameters.

##### Sample Code Snippet

The following MATLAB code snippet from `QHforDiameters.m` illustrates the process of optimizing neural network hyperparameters and visualizing the results:

```matlab
clear; clc; clf;
load('filtered_QHD_table.mat');
load('filtered_QDP_table.mat');
load('deleted_QHD_table.mat');
load('deleted_QDP_table.mat');

QH = [filtered_QHD_table.FlowRate_m3h, filtered_QHD_table.Head_m]';
D  = [filtered_QHD_table.Diameter_mm]';

QH_beps=[deleted_QHD_table.FlowRate_m3h,deleted_QHD_table.Head_m]';
D_beps=[deleted_QHD_table.Diameter_mm]';

QD = [filtered_QDP_table.FlowRate_m3h,filtered_QDP_table.Diameter_mm]';
P = [filtered_QDP_table.Power_kW]';

QD_beps=[deleted_QDP_table.FlowRate_m3h,deleted_QDP_table.Diameter_mm]';
P_beps=[deleted_QDP_table.Power_kW]';

% User-specified random seed (optional)
userSeed = 4826;

% Define a threshold for MSE to exit the loop early
mseThreshold = 0.000199;

% Initialize result matrix
result = [];

% Find all distinct diameters in D
distinctDiameters = unique(D);

% Weights for combining MSEs
weightDiameter = 0.5;
weightBeps = 0.5;

for dIdx = 1:length(distinctDiameters)
    % Current diameter to remove
    diameterToRemove = distinctDiameters(dIdx);
    
    % Find indices of the current diameter in D
    indicesToRemove = find(D == diameterToRemove);
    
    % Store the removed data for later use
    removedQH = QH(:, indicesToRemove);
    removedD = D(indicesToRemove);
    
    % Remove rows from QH and D based on the indices
    QH_temp = QH;
    D_temp = D;
    QH_temp(:, indicesToRemove) = [];
    D_temp(:, indicesToRemove) = [];
    
    % Initialize bounds
    lower_bounds = [2, 13, 13, 1, 1];
    upper_bounds = [2, 300, 300, 2, 1];
    
    % Track the previous combined MSE to determine the improvement
    prevCombinedMSE = inf;

    for

 i = 1:20
        [optimalHyperParamsH, finalMSEH, randomSeedH, bestTrainedNetH, error] = optimizeNNForTrimmingPumpImpeller([QH_temp(1,:); D_temp], QH_temp(2,:), userSeed+i, lower_bounds, upper_bounds);

        % Store result for this iteration
        result(i, :) = [i, optimalHyperParamsH, finalMSEH, randomSeedH, error(1), error(2), error(3)];

        % Calculate MSE for the removed diameter
        predictedH = bestTrainedNetH([removedQH(1, :); removedD])';
        mseDiameter = mean((removedQH(2, :)' - predictedH).^2 / sum(removedQH(2, :)));
        predictedH_beps = bestTrainedNetH([QH_beps(1,:); D_beps])';
        mseQH_beps = mean((QH_beps(2,:)' - predictedH_beps).^2 / sum(QH_beps(2,:)));

        fprintf('Diameter %d, Iteration %d, MSE_Dia: %.6f,  MSE_beps: %.6f \n', diameterToRemove, i, mseDiameter, mseQH_beps);

        % Combine the two MSEs into a single metric
        combinedMSE = weightDiameter * mseDiameter + weightBeps * mseQH_beps;
        
        % Determine the change in combined MSE
        deltaMSE = prevCombinedMSE - combinedMSE;
        
        % Adjust the bounds based on the improvement in combined MSE
        if deltaMSE > 0.01  % Significant improvement
            adjustment = [0, 5, 15, 0, 0];
        elseif deltaMSE > 0.001  % Moderate improvement
            adjustment = [0, 2, 10, 0, 0];
        else  % Minor improvement
            adjustment = [0, 1, 5, 0, 0];
        end
        
        lower_bounds = max(lower_bounds, [2, optimalHyperParamsH(2), optimalHyperParamsH(3), 1, 1] - adjustment);
        upper_bounds = min(upper_bounds, [2, optimalHyperParamsH(2), optimalHyperParamsH(3), 2, 1] + adjustment);
        
        % Update the previous combined MSE for the next iteration
        prevCombinedMSE = combinedMSE;

        % Define desired diameter values 
        desiredDiameters = distinctDiameters; 

        % Create a single figure for all plots
        figure;
        hold on;  % Keep plots on the same figure

        % Plot the removed diameter data points
        scatter(removedQH(1, :)', removedQH(2, :)', 'r', 'filled', 'DisplayName', sprintf('Removed Diameter: %dmm', diameterToRemove));
        
        Qt = linspace(0, 400, 200);

        for diameterIndex = 1:length(desiredDiameters)
            desiredDiameter = desiredDiameters(diameterIndex);
            Dt = repmat(desiredDiameter, length(Qt), 1);
            filteredQH = bestTrainedNetH([Qt; Dt'])';
            legendLabel = strcat('Diameter: ', num2str(desiredDiameter), 'mm');
            plot(Qt, filteredQH, 'DisplayName', legendLabel);
            text(Qt(end), filteredQH(end), sprintf('%dmm', desiredDiameter), 'FontSize', 8, 'Color', 'black', 'BackgroundColor', 'white');
        end

        scatter(Qa', Ha', 'b', 'filled', 'DisplayName', 'Reference Points');
        
        xlabel('Q (m^3/h)');
        ylabel('H (m)');
        title(['(Q, H) slices with Diameters, Removed Diameter: ' num2str(diameterToRemove) 'mm']);
        legend;  
        hold off;

        filename = sprintf('../loop_05/01/nn_diameter-%d_iteration_%d_%d-%d-%d-%d-%d_mseDia-%d_test-%d.png', diameterToRemove, i, optimalHyperParamsH(1), optimalHyperParamsH(2), optimalHyperParamsH(3), optimalHyperParamsH(4), optimalHyperParamsH(5), mseDiameter, error(3));
        saveas(gcf, filename);

        filename = sprintf('../loop_05/01/nn_diameter-%d_iteration_%d_%d-%d-%d-%d-%d_mseDia-%d_test-%d.mat', diameterToRemove, i, optimalHyperParamsH(1), optimalHyperParamsH(2), optimalHyperParamsH(3), optimalHyperParamsH(4), optimalHyperParamsH(5), mseDiameter, error(3));
        save(filename, 'bestTrainedNetH');

        close(gcf);

        if (mseDiameter < mseThreshold) && (error(3) < 0.0199) && (mseQH_beps < mseThreshold) {
            fprintf('MSE for diameter %d is below the threshold. Exiting loop.\n', diameterToRemove);
            break;
        }
    end
end

writematrix([["Iteration", "Hidden Layer 1 Size", "Hidden Layer 2 Size", "Max Epochs", "Training Function", "Activation Function", "Final MSE", "Random Seed", "Training Error", "Validation Error", "Test Error"]; result], './01/results_loop.csv');
disp('./01/Results saved to results_loop.csv');
```

In this script, data is loaded and prepared for training. The genetic algorithm is utilized to optimize neural network hyperparameters, ensuring accurate predictions for different impeller diameters. The `optimizeNNForTrimmingPumpImpeller` function performs the optimization, while the main script iterates through various diameters, training and evaluating the neural network's performance. The visualization step plots the predicted performance curves for different diameters, allowing for easy comparison and analysis.

## Conclusion

This chapter has outlined the significance of impeller trimming in centrifugal pump operation, traditional methods for trimming, and the advantages of using AI, specifically neural networks, for predicting pump performance. The implementation details provided in MATLAB highlight the practical aspects of this approach, demonstrating its potential for optimizing pump performance efficiently and accurately. The use of constant-area scaling and advanced neural network architectures underscores the importance of combining theoretical understanding with computational techniques to achieve optimal results.
